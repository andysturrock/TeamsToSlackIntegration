# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:
  environmentName: 'dev'
  azureResourceGroup: 'ZNE-MSTC-N-11-ASS-VMS-RSG'
  azureSubscription: 'Spoke-zne-mstc-n-slack-sbc-CE-ZNE-MSTC-N-11'
  storageAccountName: 'clientangularapp'
  containerName: 'dist'

stages:
    - stage: build
      # condition: false
      displayName: Build
      dependsOn: []
      jobs:
      - job: build
        displayName: Build Angular app
        pool:
          name: BP-Linux-AgentOS

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '10.x'
            displayName: 'Install Node.js'
            
          - script: |
              cd client
              npm install -g @angular/cli
            displayName: 'Install Angular'

          - script: |
              cd client
              npm install
            displayName: 'Install dependencies'

          - script: |
              cd client
              ng build --prod
            displayName: 'Angular build'
            

          - task: ArchiveFiles@2
            displayName: 'Create Artifact: angular'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/client/dist'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/angular.zip'
              replaceExistingArchive: true
          
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Pipeline Artifact: angular.zip'
            inputs:
              path: $(Build.ArtifactStagingDirectory)/angular.zip
              artifact: ClientWebApp

    - stage: deploy_dev
      displayName: Deploy Dev
      condition: true
      dependsOn: [Build]
      jobs:
      - job: deploy
        displayName: Deploy Angular app
        pool:
          name: GenericPool1

        steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download pipeline artifact angular.zip
            inputs:
              buildType: 'current'
              artifactName: 'ClientWebApp'
              itemPattern: 'angular.zip'
              targetPath: '$(Pipeline.Workspace)'

          - task: ExtractFiles@1
            displayName: 'Extract website files from artifact'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/angular.zip'
              destinationFolder: '$(Pipeline.Workspace)/dist'
              cleanDestinationFolder: true

          - task: AzureCLI@2
            displayName: 'Azure CLI - Create Storage Account'
            name: azStorageAccountCreate
            inputs:
              azureSubscription: '${{variables.azureSubscription}}'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Creating Storage Account"
                az storage account create --name ${{variables.storageAccountName}} --resource-group "${{variables.azureResourceGroup}}" `
                --access-tier Hot --location westeurope --tags 'environment=${{variables.environmentName}}' --sku Standard_RAGRS --kind StorageV2 `
                --https-only true --encryption-services file --encryption-services blob
                Write-Host "Enabling Static website"
                az storage blob service-properties update --account-name clientangularapp --static-website `
                --404-document index.html --index-document index.html

          - task: AzureCLI@2
            displayName: 'Azure CLI - Create blob container'
            name: azStorageContainerCreate
            inputs:
              azureSubscription: '${{variables.azureSubscription}}'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Creating Blob Container"
                az storage container create --public-access container --account-name ${{variables.storageAccountName}} --name ${{variables.containerName}}
                Write-Host "Setting up permission"
                az storage container set-permission --public-access container --account-name ${{variables.storageAccountName}} --name ${{variables.containerName}}
                Write-Host "Delete content of Container"
                az storage blob delete-batch --account-name ${{variables.storageAccountName}} --source ${{variables.containerName}} --pattern '*'
                Write-Host "Delete content of Web Container"
                az storage blob delete-batch --account-name ${{variables.storageAccountName}} --source $web --pattern '*'

          - task: AzureFileCopy@2
            displayName: 'Copy website files to blob container'
            inputs:
              SourcePath: '$(Pipeline.Workspace)/dist'
              azureSubscription: '${{variables.azureSubscription}}'
              Destination: AzureBlob
              storage: ${{variables.storageAccountName}}
              ContainerName: ${{variables.containerName}}
          
          - task: AzureFileCopy@3
            displayName: 'Copy website files to blob web container'
            inputs:
              SourcePath: '$(Pipeline.Workspace)/dist/TeamsToSlackIntegration'
              azureSubscription: '${{variables.azureSubscription}}'
              Destination: 'AzureBlob'
              storage: '${{variables.storageAccountName}}'
              ContainerName: '$web'
