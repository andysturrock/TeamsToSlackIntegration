# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:
  environmentName: 'dev'
  azureResourceGroup: 'ZNE-MSTC-N-11-ASS-VMS-RSG'

stages:
    - stage: build
      condition: false
      displayName: Build
      dependsOn: []
      jobs:
      - job: build
        displayName: Build Angular app
        pool:
          name: BP-Linux-AgentOS

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '10.x'
            displayName: 'Install Node.js'
            
          - script: |
              cd client
              npm install -g @angular/cli
            displayName: 'Install Angular'

          - script: |
              cd client
              npm install
            displayName: 'Install dependencies'

          - script: |
              cd client
              ng build --prod
            displayName: 'Angular build'
            

          - task: ArchiveFiles@2
            displayName: 'Create Artifact: angular'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/client/dist'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/angular.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: angular'
            inputs:
              ArtifactName: angular

    - stage: deploy_dev
      displayName: Deploy Dev
      condition: true
      #dependsOn: [Build]
      jobs:
      - job: deploy
        displayName: Deploy Angular app
        pool:
          name: GenericPool1

        steps:
          - task: AzureCLI@2
            displayName: 'Azure CLI - Create Storage Account'
            name: azStorageAccount
            inputs:
              #azureSubscription: 'Spoke-${{ variables.azureResourceGroup }}'
              azureSubscription: 'Spoke-zne-mstc-n-slack-sbc-CE-ZNE-MSTC-N-11'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                echo "Start json..."
                az storage account create --name clientangularapp --resource-group "${{ variables.azureResourceGroup }}" `
                --access-tier Hot --location westeurope --tags 'environment=dev' --sku Standard_RAGRS --kind StorageV2 --https-only true `
                --encryption-services file --encryption-services blob
                echo "End json."

          - task: AzureCLI@2
            displayName: 'Azure CLI - Create Blob Container'
            name: azStorageContainer
            inputs:
              #azureSubscription: 'Spoke-${{ variables.azureResourceGroup }}'
              azureSubscription: 'Spoke-zne-mstc-n-slack-sbc-CE-ZNE-MSTC-N-11'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                echo "Start json..."
                az storage account list --resource-group ${{ variables.azureResourceGroup }} -o json
                echo "End json."
                echo "second json..."
                az storage account list --resource-group ${{ variables.azureResourceGroup }} -o json --query "[?tags.environment=='${{ variables.environmentName }}'].name"
                echo "end 2nd json"
                echo "3rd json..."
                az storage account list --resource-group ${{ variables.azureResourceGroup }} -o json --query "[?tags.environment=='${{ variables.environmentName }}'].name | [0]"
                echo "end 3rd json"
                $accountName = $(az storage account list -g ${{ variables.azureResourceGroup }} -o json --query "[?tags.environment=='${{ variables.environmentName }}'].name | [0]")
                $containerName = 'SlackTeamsIntegrationClient'
                echo accountName=<<<$accountName>>>
                echo containerName=<<<$containerName>>>
                Write-Host "##vso[task.setvariable variable=accountName;isOutput=true]$accountName"
                Write-Host "##vso[task.setvariable variable=containerName;isOutput=true]$containerName"
                Write-Host "Creating Blob Container"
                echo "az storage container create --public-access container --account-name $accountName --name $containerName"
                Write-Host "Setting up permission"
                echo "az storage container set-permission --public-access container --account-name $accountName --name $containerName"
                Write-Host "Delete content of Container"
                echo "az storage blob delete-batch --account-name $accountName --source $containerName --pattern '*'"
